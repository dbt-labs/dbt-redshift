# **what?**
# Runs code quality checks, unit tests, and verifies python build on
# all code commited to the repository. This workflow should not
# require any secrets since it runs for PRs from forked repos.
# By default, secrets are not passed to workflows running from
# a forked repo.

# **why?**
# Ensure code for dbt meets a certain quality standard.

# **when?**
# This will run for all PRs, when code is pushed to a release
# branch, and when manually triggered.

name: Tests and Code Checks

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  pull_request:
  workflow_dispatch:

permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  code-quality:
    name: code-quality

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install python dependencies
        run: |
          python -m pip install  --user --upgrade pip
          python -m pip install -r dev-requirements.txt
          python -m pip --version
          pre-commit --version
          dbt --version

      - name: pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

  unit:
    name: unit test / python ${{ matrix.python-version }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    env:
      TOXENV: "unit"
      PYTEST_ADDOPTS: "-v --color=yes --csv unit_results.csv"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install  --user --upgrade pip
          python -m pip install tox
          python -m pip --version
          tox --version

      - name: Run tox
        run: tox

      - name: Get current date
        if: always()
        id: date
        #no colons allowed for artifacts
        run: |
          echo "date=$(date +'%Y-%m-%dT%H_%M_%S')" >> $GITHUB_OUTPUT

  test-build:
    name: verify packages / python ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        python-version: ['3.9', '3.10', '3.11']
        dist-type: ["whl", "gz"]
        exclude:
          # psycopg2-binary doesn't have a precompiled wheel for python 3.9 for mac
          - os: macos-14
            python-version: '3.9'
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install python dependencies
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade setuptools wheel twine check-wheel-contents
          python -m pip --version
      - if: matrix.os == 'macos-14'
        run: brew install postgresql@14
      - run: ./scripts/build-dist.sh
      - run: ls -lh dist/
      - run: twine check dist/*
      - run: check-wheel-contents dist/*.whl --ignore W007,W008
      - id: check-is-alpha
        run: |
          export is_alpha=0
          if [[ "$(ls -lh dist/)" == *"a1"* ]]; then export is_alpha=1; fi
          echo "is_alpha=$is_alpha" >> $GITHUB_OUTPUT
      - name: Install ${{ matrix.dist-type }} distributions
        if: ${{ steps.check-is-alpha.outputs.is_alpha == 0 }}
        run: find ./dist/*.${{ matrix.dist-type }} -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/
      - name: Check ${{ matrix.dist-type }} distributions
        if: ${{ steps.check-is-alpha.outputs.is_alpha == 0 }}
        run: python -c "import dbt.adapters.redshift"
